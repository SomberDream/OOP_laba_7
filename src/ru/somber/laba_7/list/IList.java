package ru.somber.laba_7.list;

public interface IList<T> {

    /**
     * Добавляет элемент в начало списка.
     */
    void addFirst(T element);

    /**
     * Добавлеяет элемент в конец списка.
     */
    void addLast(T element);

    /**
     * Добавляет элемент по указанному индексу.
     * В случае, если индекс выходит за пределы списка, генерируется исключение.
     */
    void add(int index, T element);

    /**
     * Возвращает первый в списке элемент.
     */
    T getFirst();

    /**
     * Вовзвращает последний в списке элемент.
     */
    T getLast();

    /**
     * Удаляет первый в списке элемент.
     */
    void removeFirst();

    /**
     * Удаляет последний в списке элемент.
     */
    void removeLast();

    /**
     * Возвращает элемент из списка по индексу index.
     */
    T get(int index);

    /**
     * Устанавливает переданный элемент по индексу index.
     */
    void set(int index, T element);

    /**
     * Возвращает индекс первого вхождения переданного элемента в списке.
     * Если элемент не найден, то возвращает -1.
     */
    int firstIndexOf(T element);

    /**
     * Возвращает true, если переданный элемет хранится в списке.
     * Иначе false.
     */
    boolean contains(T element);

    /**
     * Удаляет первое вхождение элемента в список.
     */
    void remove(T element);

    /**
     * Удаляет элемент по переданному индексу.
     */
    void removeByIndex(int index);


    /**
     * Полностью очищает список от всех элементов.
     */
    void clear();

    /**
     * Возвращет количество хранящихся элементов.
     */
    int getSize();

    /**
     * Возвращает true, если список пуст.
     * Иначе false.
     */
    boolean isEmpty();

    /**
     * Возвращает объект итератора для обхода списка.
     * При модификации списка итератор более использовать нельзя,
     * т.к. итератор может работать некорректно.
     */
    IIterator<T> getIterator();

}
